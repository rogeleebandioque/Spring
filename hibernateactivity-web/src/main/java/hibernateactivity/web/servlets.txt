package hibernateactivity.app;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import hibernateactivity.core.service.Service;
import hibernateactivity.core.model.Person;
import hibernateactivity.core.model.Contacts;
import hibernateactivity.core.model.Name;
import hibernateactivity.core.model.Roles;
import org.apache.commons.validator.routines.DateValidator;

public class Servlets extends HttpServlet {
    private Service service;
    private String title;
    private String startHtml;
    private String endHtml;
    public void init() throws ServletException{
        service = new Service();
        title = "Servlets Activity";
        startHtml = "<!doctype html public \"-//w3c//dtd html 4.0 transitional//en\">\n"+
                    "<html>\n" +
                    "<head><title>" + title + "</title>" +
                    "<link rel=\"stylesheet\" type=\"text/css\" href=\"servlets.css\"/>" + 
                    "<script src=\"servlets.js\"></script></head>\n" +
                    "<body><div id=\"container\">\n" +
                    "<h1 align=\"center\">" + title + "</h1>\n";
        endHtml = "</div></body></html>";
    }
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        out.println(startHtml);
        String choice = request.getParameter("todo").toLowerCase();
        switch (choice) {
            case "person":
                List<Person> person = service.getPersons(request.getParameter("listBy"), request.getParameter("order"));
                out.println(displayPerson(person));
                break;

            case "role":
                //roleBy
                List<Person> persona = service.getByRole(request.getParameter("roleBy"));
                out.println(displayPerson(persona));
                break;

            case "delete":
                boolean exist = service.searchPersons(integerValid(request.getParameter("id_number")));
                if (!exist) {
                    String mes = service.deletePersons(integerValid(request.getParameter("id_number")));
                    out.print("<h1>"+mes+ "</h1>");
                } else {
                    out.print("<h1> Person does not Exist</h1>");
                }
                break;

            case "edit":
                boolean existEdit = service.searchPersons(integerValid(request.getParameter("id_number")));
                if (!existEdit) {
                    String mes = "";//EDIT PERSON
                    Person people = service.getPersons(integerValid(request.getParameter("id_number")));
                    mes = editForm(people);
                    out.println(mes);                    
                    
                } else {
                    out.print("<h1> Person does not Exist</h1>");
                }
                break;

            default:
                break;
        }
        out.println(endHtml);
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        out.println(startHtml);
        String choicePost = request.getParameter("todo").toLowerCase();

        switch(choicePost){
            case "add":
                Name name = new Name(request.getParameter("first_name"),
                                    request.getParameter("last_name"));
                Person addPer = new Person(name, request.getParameter("address"),
                                                integerValid(request.getParameter("age")),
                                                request.getParameter("gender"),
                                                dateValid(request.getParameter("bday")),
                                                integerValid(request.getParameter("grade")),
                                                dateValid(request.getParameter("date_hired")),
                                                request.getParameter("currently_employed"));
                String[] contactDet = request.getParameterValues("contactDetail");
                String[] contactTyp = request.getParameterValues("contactType");
                String[] role = request.getParameterValues("roles");
                
                Set<Contacts> contacts = contactDetails(contactDet,contactTyp);
                addPer.setContact(contacts);
                addPer.setRole(addRole(role));                
                out.println("<h1>" + service.addPersons(addPer) + "</h1>");
                break;
            
            case "edit":
                Person people = service.getPersons(integerValid(request.getParameter("person")));
                Name n = people.getNames();
                n.setFirst_name(request.getParameter("first_name"));
                n.setLast_name(request.getParameter("last_name"));
                people.setAddress(request.getParameter("address"));
                people.setAge(integerValid(request.getParameter("age")));
                people.setGender(request.getParameter("gender"));
                people.setBday(dateValid(request.getParameter("bday")));
                people.setGrade(integerValid(request.getParameter("grade")));
                people.setDate_hired(dateValid(request.getParameter("date_hired")));
                people.setCurrently_employed(request.getParameter("currently_employed"));

                String[] upcontactDet = request.getParameterValues("contactDetail");
                String[] upcontactTyp = request.getParameterValues("contactType");
                String[] uprole = request.getParameterValues("roles");
                
                Set<Contacts> upcontacts = contactDetails(upcontactDet,upcontactTyp);
                people.setContact(upcontacts);
                people.setRole(addRole(uprole));            
                
                String message = service.updatePersons(people);              
                out.print("<h1>"+message+ "</h1>");
                break;        
        }  

        out.println(endHtml);
    }

    public static String displayPerson(List<Person> person) {
        String words = "<table border=\"1\"align=\"center\"><tr><th>Name</th><th>Grade</th><th>Date Hired</th><th>Contact Number</th></tr>";
        for(Person persons: person){
            Name name = persons.getNames();
            words = words +"<tr><td>"+ name.getFirst_name() + " " + name.getLast_name()+"</td>" + 
                           "<td>"+ persons.getGrade() +"</td>" +
                           "<td>"+ persons.getDate_hired() +"</td> <td>";

            for(Contacts contact:persons.getContact()){
                words = words + contact.getType() + ": " + contact.getContact() + " \n" ;
            }     
            words = words + "</td></tr>";
        }
        words = words + "</table>";
        return words;
    }


    public static Set contactDetails(String[] cDetails, String[] cType) {
        Set cD = new HashSet();
        for (int i=0; i<cDetails.length; i++) {
            Contacts c = new Contacts(cDetails[i],cType[i].toLowerCase());
            cD.add(c);
        }
    return cD;
    }
    
    public static Set<Roles> addRole(String[] roles) {
        Set r = new HashSet();       
        for(int i=0; i<roles.length;i++) {
            switch(roles[i]) {
                case "police": 
                    r.add(new Roles(1,"Police"));
                    break;
                case "politician":
                    r.add(new Roles(2,"Politician"));
                    break;
                case "soldier":
                    r.add(new Roles(3,"Soldier"));
                    break;
                case "celebrity":
                    r.add(new Roles(4,"Celebrity"));
                    break;
                case "worker":
                    r.add(new Roles(5,"Worker"));
                    break;
            }
        }
        return r;
    }

    public static Date dateValid(String date) {
        DateValidator dateVal = DateValidator.getInstance();
        Date dt = null;                    
        
        dt = dateVal.validate(date, "MM/dd/yyyy");
        if(dt == null) {
            date = "01/01/0001";
            dt = dateVal.validate(date, "MM/dd/yyyy");
        } 
        return dt; 
    }

    public static int integerValid(String in) {
        boolean a = true;
        int input = 0;
        
            try {
                input = Integer.parseInt(in);
            } catch(NumberFormatException e) {
                input = 0;
            }
        return input;
    }
    
    public static String editForm(Person person) {
        Name n = person.getNames();
        String eForm = "<form action=\"Servlets\" method=\"POST\"><table align=\"center\">" +
                        "<tr><td>First Name: </td><td><input type=\"text\" name=\"first_name\"value=\"" + n.getFirst_name() + "\"/></td></tr>" +
                        "<tr><td>Last Name: </td><td><input type=\"text\" name=\"last_name\"value=\"" + n.getLast_name() + "\"/></td></tr>" +
                        "<tr><td>Address: </td><td><input type=\"text\" name=\"address\"value=\"" + person.getAddress() + "\"/></td></tr>" +
                        "<tr><td>Birthday: </td><td><input type=\"date\" name=\"bday\"value=\"" + person.getBday() + "\"/></td></tr>" +
                        "<tr><td>Age: </td><td><input type=\"number\" name=\"age\"value=\"" + person.getAge() + "\"/></td></tr>"+
                        "<tr><td>Contacts: </td><td>";
        Set<Contacts> c = person.getContact();
        for(Contacts cont: c) {
            eForm = eForm + cont.getType() + ": <input type=\"text\" name=\"contactDetail\" value=\""+ cont.getContact() +"\"/>"+
                    "<input type=\"hidden\" name=\"contactType\" value=\""+cont.getType() +"\"/><br/>";
        }
        eForm = eForm + "</td></tr>";
        eForm = eForm + "<tr><td>Gender: </td><td><input type=\"radio\" name=\"gender\" value=\"male\"/>Male" +
                        "<input type=\"radio\" name=\"gender\" value=\"female\"/>Female</td></tr>" +    
                        "<tr><td>Grade: </td><td><input type=\"number\" name=\"grade\" value=\""+ person.getGrade() +"\"/></td></tr>" +
                        "<tr><td>Date hired: </td><td><input type=\"date\" name=\"date_hired\"value=\""+ person.getDate_hired()+"\"/></td></tr>" +
                        "<tr><td>Currently Employed: </td><td>" +
                                    "<input type=\"radio\" name=\"currently_employed\" value=\"yes\"/>Yes" +
                                    "<input type=\"radio\" name=\"currently_employed\" value=\"no\"/>No" +
                        "</td></tr>" +
                        "<tr><td>Roles: </td><td><input type=\"checkbox\" name=\"roles\" value=\"police\"/>Police <br/>" +
                                    "<input type=\"checkbox\" name=\"roles\" value=\"soldier\"/>Soldier <br/>" +
                                    "<input type=\"checkbox\" name=\"roles\" value=\"politician\"/>Politician<br/>" +
                                    "<input type=\"checkbox\" name=\"roles\" value=\"celebrity\"/>Celebrity <br/>" +
                                    "<input type=\"checkbox\" name=\"roles\" value=\"worker\"/>Worker</td></tr>" +
                        "<tr><td></td><td><input type=\"submit\" value=\"Update Details\">" +
                        "<input type=\"button\" value=\"Cancel\" onClick=\"location.href='Servlets.html'\"/>" +
                        "<input type=\"hidden\" name=\"todo\" value=\"edit\"/></br>" +
                        "<input type=\"hidden\" name=\"person\" value=\""+ person.getId() +"\"/></br>";
                      
       return eForm;                 
    }

}    
